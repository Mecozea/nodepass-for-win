---
description: 
globs: 
alwaysApply: true
---
# Tauri项目开发规则

## 项目架构
- 这是一个Tauri桌面应用项目
- 前端使用React框架
- 后端使用Rust
- UI组件库使用Ant Design
- 包管理工具使用pnpm
- 窗口为自定义窗口实现

## 命令行操作规范

### PowerShell命令拼接
- 在PowerShell中拼接多个命令时，必须使用分号(;)而不是双&符号
- 正确示例：`command1; command2; command3`
- 错误示例：`command1 && command2 && command3`

### 代理环境变量设置
在执行build、dev、install等相关命令前，必须先设置代理环境变量：
```powershell
set HTTP_PROXY=http://127.0.0.1:7897; set HTTPS_PROXY=http://127.0.0.1:7897
```

## 代码开发规范

### React前端开发
- 使用函数组件和React Hooks
- 遵循Ant Design的设计规范和组件使用方式
- 组件文件使用.tsx扩展名
- 样式优先使用Ant Design提供的样式系统

### Tauri后端开发
- Rust代码遵循标准的Rust编码规范
- API接口使用Tauri的invoke机制
- 文件操作和系统调用通过Tauri提供的安全API

### 自定义窗口处理
- 窗口配置在tauri.conf.json中定义
- 窗口控制逻辑在前端通过Tauri API实现
- 注意处理窗口状态管理和用户交互

## 项目结构规范
```
src/
├── components/     # React组件
├── pages/         # 页面组件
├── hooks/         # 自定义Hooks
├── utils/         # 工具函数
├── styles/        # 样式文件
└── types/         # TypeScript类型定义

src-tauri/
├── src/           # Rust源码
├── icons/         # 应用图标
└── Cargo.toml     # Rust依赖配置
```

## 注意事项
1. 所有网络相关操作（安装、构建、开发）都需要先设置代理
2. PowerShell命令拼接使用分号，确保命令正确执行
3. 开发时注意前后端通信的类型安全
4. 自定义窗口的交互体验要保持一致性
5. 使用pnpm而不是npm或yarn进行包管理

## 调试建议
- 前端调试使用浏览器开发者工具
- 后端调试使用Rust的println!宏或log库

- Tauri应用调试可以通过tauri dev命令启动开发模式